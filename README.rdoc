= Shoe

You probably don't want to use Shoe -- especially if you're like me!

I like tinkering with my build scripts. That's why I don't use
hoe[http://seattlerb.rubyforge.org/hoe] and
jeweler[http://github.com/technicalpickles/jeweler] and those guys, even though
they're awesome. I like to put my own thing together, so I made Shoe.

== Behold

Here's how your Rakefile looks:

 require 'shoe'
 require 'my_project/version'

 Shoe.tie('my_project', MyProject::VERSION, "This is my project, and it's awesome!") do |spec|
   # do whatever you want with the Gem::Specification here, for example:
   # spec.add_runtime_dependency 'dnssd'
 end

And here's what you get, at most:

 rake clean         # Remove ignored files
 rake compile       # Compile C extensions
 rake cucumber      # Run features
 rake cucumber:wip  # Run work-in-progress features
 rake default       # Run features
 rake gemspec       # Show latest gemspec contents
 rake rdoc          # Generate documentation
 rake release       # Release myproject-0.1.0
 rake shell         # Run an irb console
 rake test          # Run tests

Most of the time, though, you won't see all of these: when possible, tasks are
conditionally defined.

See what I mean by reading Shoe#define_tasks.

== Getting Started

It's nice to use bundler[http://github.com/carlhuda/bundler], though
bootstrapping is a little chicken-and-egg-y.

Start with just shoe in your +Gemfile+:

 source :gemcutter

 gem 'shoe'

Use shoe to generate some skeleton project files:

 bundle exec shoe

Then add my_project to your +Gemfile+:

 gem 'my_project', :path => File.expand_path('..', __FILE__)

And then you can poke around with

 bundle exec rake -T

(It's probably worth aliasing rake to "bundle exec rake" in your shell.)
