= Shoe

You probably don't want to use shoe -- especially if you're like me!

I like tinkering with my build scripts, so I made shoe, even though
hoe[http://seattlerb.rubyforge.org/hoe] and
jeweler[http://github.com/technicalpickles/jeweler] are awesome.

== Behold

Here's how your +Rakefile+ looks:

 require 'shoe'
 require 'my_project/version'

 Shoe.tie('my_project', MyProject::VERSION, "This is my project, and it's awesome!") do |spec|
   # do whatever you want with the Gem::Specification here, for example:
   # spec.add_runtime_dependency 'dnssd'
 end

And here's what you get, at most:

 rake clean         # Remove ignored files
 rake compile       # Compile C extensions
 rake cucumber      # Run features
 rake cucumber:wip  # Run work-in-progress features
 rake default       # Run features
 rake gemspec       # Show latest gemspec contents
 rake rdoc          # Generate documentation
 rake release       # Release myproject-0.1.0
 rake shell         # Run an irb console
 rake test          # Run tests

Most of the time, though, you won't see all of these: when possible, tasks are
conditionally defined.

See what I mean by reading <tt>Shoe#define_tasks</tt>.

== Getting Started

=== With Bundler[http://github.com/carlhuda/bundler]

Start with just shoe in your +Gemfile+:

 source :gemcutter
 gem 'shoe'

Open a sub-shell configured for the bundler environment: (See Notes on <tt>`bundle exec bash`</tt>, below.)

 $ bundle exec $SHELL

Use +shoe+ to generate some skeleton project files:

 $ shoe

And then you can poke around with

 $ rake -T

=== Without Bundler

If you're not using bundler, it's probably best not to use the +shoe+
generator. Instead, just install shoe normally:

 $ gem install shoe

And then <tt>require 'shoe'</tt> and add a <tt>Shoe.tie</tt> clause to your +Rakefile+:

 Shoe.tie('my_project', '0.0.0', 'My project is awesome.') do |spec|
   # spec.add_runtime_dependency 'dnssd' # or whatever...
 end

Shoe also assumes you have a <tt>README.rdoc</tt>, so you'll need to create one if you
want to avoid warnings running <tt>`rake rdoc`</tt>.

== Notes on <tt>`bundle exec bash`</tt>

If your <tt>$SHELL</tt> happens to be +bash+, you may run into some of the same problems I did.

Here they are, with fixes:

=== Functions and Aliases Aren't Available

I had all of my +bash+ configuration in <tt>~/.profile</tt>. But,
<tt>~/.profile</tt> isn't read when you execute +bash+ from the command-line
(i.e. as a non-login shell), and only environment variables are inherited from
the parent shell; not functions, aliases, or completion rules.

So, just move all your non-environment-variable configuration out of
<tt>~/.profile</tt> and into <tt>~/.bashrc</tt>, and then add something like
this to your <tt>~/.profile</tt>:

 if [ -f ~/.bashrc ]; then
   source ~/.bashrc
 fi

=== Prompts are SLOW!

Once I got that sorted, I still had the problem that my bash prompts were way
slow to generate. I was using the <tt>__git_ps1</tt> function and had the
standalone version of Chris Wanstrath's hub[http://github.com/defunkt/hub]
installed, with <tt>alias git=hub</tt> in my <tt>~/.bashrc</tt>.

The issue is that <tt>`bundle exec`</tt> adds <tt>-rbundler/setup</tt> to the
+RUBYOPT+ environment variable, so every +ruby+ invocation first requires all
of your bundled gems. Since +hub+ is a ruby script, and <tt>__git_ps1</tt>
invokes +git+ multiple times, generating a prompt gets expensive quickly. I was
seeing something like 3-second delays!

One way to work around this issue is to change the way you call +hub+, clearing
out +RUBYOPT+ first:

 $ alias git='RUBYOPT= hub'
